---
title: "tp2"
author: "Miguel, Salvador, Thomas"
format: html
editor: visual
---

## DATAFRAMES

```{r}
source(file = "code.R", local = T)
load("tp2.Rdata")
```

#poner una visualizacion de ambos dataframes como en el tp1, y ademas explicar las nuevas variables creadas.

## LIBRERIAS

Para el tp usamos las siguientes librerias

```{r}
library(ggplot2)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(parttree)
library(class)
library(readr)
```

## REGRESIÓN

#### Problema

Buscamos hallar 2 varaibles que mejor describan/predigan el uso de bicis, según variables relacionadas al clima y fechas laborales.

#### Solución

Comenzaremos observando y haciendo un analisis exploratorio del dataframe. Este analísis tiene como objetivo encontrar las variables que mejor describan el uso de bicicletas en CABA.

Analizando cada variables independiente, observamos que una variable fue la que mejor se destaco en este analísis, la cual es "dia_laboral" que indica el uso de bicis en dias feriados/fines de semana y dias laborales.

```{r}
gr_bike_uses_by_workdays
```

Con esta variable en consideración, analizamos como se comporta esta variable con las otras variables disponibles

Hallamos 4 variables que podrían ser candidatos para ser la segunda variable. Estas variables son tmin, tmax, tavg y llovio

```{r}
gr_bike_uses_tavg_workday
gr_bike_uses_tmin_workday
gr_bike_uses_tmax_workday
gr_bike_uses_rain_workday 
```

Para decidir cual de las previas combinaciones de variables utilizar, llevamos a cabo una regresión lineal para cada combinación y calculamos el error cuadrático medio para 500 dataframes de testeo.

```{r}
gr_mean_squared_error_by_model
```

Notamos que tavg y tmin tienen errores cuadraticos medios, pero por una leve diferencia tavg y dia laboral presentan un mejor modelo.\

$$
y = \alpha + \beta_1 . x_t + \beta_2 . x_t^2 + \beta_3 . x_l 
$$

alpha es el intercept

xt es la variable que indica el valor de la temperatura promedio (tavg)

xl es una variable dummy que si vale 1 si es dia laboral y 0 si es un dia no laboral

esta ecuacion representa dos parabolas, ecuaciones cuadraticas, cuya diferencia es el desplazamiento en el eje y.

```{r}
gr_visualizacion_modelotavg
```

Aquí nos propusimos intentar de hallar una ecuacion que mejor describa el modelo aun.

#AGREGAR ECUACION DEL TAVG-DIALABMEJORADO

$$
y = \alpha + \beta_1 . x_t + \beta_2 . x_t^2 + \beta_3 . x_l + \beta_4 . x_t . x_t^2 + \beta_5 . x_t . x_l + \beta_6 . x_t^2 . x_l + \beta_7 . x_t . x_t^2 . x_l 
$$

alpha es el intercept

xt es la variable que indica el valor de la temperatura promedio (tavg)

xl es una variable dummy que si vale 1 si es dia laboral y 0 si es un dia no laboral

esta ecuacion representa dos ecuaciones de grado 3, cuya diferencia es el desplazamiento es y la amplitud de cada función.

```{r}
gr_visualizacion_modelotavg_mejorado
```

```{r}
gr_mean_squared_error_tavg_upgrade_model
```

Nuevamente notamos que el error es un poco menor, por ende, utilizaremos esta mejora del tavg para predecir nuevos datos.

```{r}
gr_quadratic_ecuation_model
gr_bike_uses_tavg_workday
```

#### Conclusión

------------------------------------------------------------------------

## CLASIFICACIÓN

#### Problema

El objetivo de este ejercicio es desarrollar un clasificador de noticias en "reales" o "fake-news". A partir de 3 predictores definidos: `title_has_excl, negative y title_words`

#### Solución

Comenzamos visualizando las variables predictoras para ver si pueden sesr útiles para clasificar las noticias en "reales" vs. "fake-news".

```{r}
gr_title_exclamations

gr_negative_exclamations

gr_negative_title

#ver si no hay un grafico que mejor explique esto (quizas graficos que visualizen individualmente cada variable)

table(fake_news$title_has_excl, fake_news$type)
```

Notamos que las variables mencionadas tienen cierta habilidad para predecir si una noticia es real o fake. A partir de este analisis, ahora nos profundisaremos en crear dos modelos que puedan predecir que probabilidad tiene una noticia de ser fake o real.

### Modelo de Arboles de Decisión

Para nuestro modelo de arboles de decision, debemos hallar el minsplit que mejor predice la variable type

```{r}
v_accuracy_prom_tree
```

Vemos que para 15 testeos un minsplit con valor 22, fue el que mejor predijo en promedio.

#probar con mas tests y ver otras variables (investigar rpart.control())

```{r}
rpart.plot(tree_model)
```

#PONER EL ACCURACY Y CREAR LA MATRIZ DE CONFUSION

### Modelo de K-NN

Para nuestro modelo de k-nn, debemos hallar el k que mejor predice la variable type

```{r}
v_accuracy_prom_knn
```

Vemos que para 15 testeos un k con valor 25, fue el que mejor predijo en promedio.

#probar con mas tests y ver otras variables (investigar rpart.control())

#### Testeo

Supongamos que se publica un nuevo artículo que tiene un título de 15 palabras sin signos de exclamación y el 6% de sus palabras tienen connotaciones negativas. Calcular la probabilidad de que el artículo sea "fake-news".

Probemos con nuestos modelos la probabilidad de que sea real vs fake.

```{r}

prediction_tree_model

prediction_knn_model
```

#### Conclusión
